[gd_scene format=3 uid="uid://ii1vk5vmfepk"]

[node name="VertexCodeAnim" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = -1030.0
offset_bottom = -620.0
clip_contents = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="."]
modulate = Color(0, 0, 0, 1)
offset_right = 40.0
offset_bottom = 14.0
text = "
void main() {

	highp vec4 vertex = vertex_attrib; // vec4(vertex_attrib.xyz * data_attrib.x,1.0);

	highp mat4 world_matrix = world_transform;

#ifdef USE_INSTANCING

	{
		highp mat4 m = mat4(instance_xform0, instance_xform1, instance_xform2, vec4(0.0, 0.0, 0.0, 1.0));
		world_matrix = world_matrix * transpose(m);
	}
#endif

	vec3 normal = normal_attrib;

#if defined(ENABLE_TANGENT_INTERP) || defined(ENABLE_NORMALMAP) || defined(LIGHT_USE_ANISOTROPY)
	vec3 orthogonal = tangent_attrib.xyz;
	float binormalf = tangent_attrib.a;
#endif

#if defined(ENABLE_COLOR_INTERP)
	color_interp = color_attrib;
#if defined(USE_INSTANCING)
	color_interp *= instance_color;
#endif

#endif

#if defined(ENABLE_TANGENT_INTERP) || defined(ENABLE_NORMALMAP) || defined(LIGHT_USE_ANISOTROPY)

	vec3 binormal = normalize(cross(normal, orthogonal) * binormalf);
#endif

#if defined(ENABLE_UV_INTERP)
	uv_interp = uv_attrib;
#endif

#if defined(ENABLE_UV2_INTERP) || defined(USE_LIGHTMAP)
	uv2_interp = uv2_attrib;
#endif

#ifdef OVERRIDE_POSITION
	highp vec4 position;
#endif

#if defined(USE_INSTANCING) && defined(ENABLE_INSTANCE_CUSTOM)
	vec4 instance_custom = instance_custom_data;
#else
	vec4 instance_custom = vec4(0.0);
#endif

	highp mat4 local_projection = projection_matrix;

//using world coordinates
#if !defined(SKIP_TRANSFORM_USED) && defined(VERTEX_WORLD_COORDS_USED)

	vertex = world_matrix * vertex;

#if defined(ENSURE_CORRECT_NORMALS)
	mat3 normal_matrix = mat3(transpose(inverse(world_matrix)));
	normal = normal_matrix * normal;
#else
	normal = normalize((world_matrix * vec4(normal, 0.0)).xyz);
#endif

#if defined(ENABLE_TANGENT_INTERP) || defined(ENABLE_NORMALMAP) || defined(LIGHT_USE_ANISOTROPY)

	orthogonal = normalize((world_matrix * vec4(orthogonal, 0.0)).xyz);
	binormal = normalize((world_matrix * vec4(binormal, 0.0)).xyz);
#endif
#endif

	float roughness = 1.0;

//defines that make writing custom shaders easier
#define projection_matrix local_projection
#define world_transform world_matrix

#ifdef USE_SKELETON
	{
		//skeleton transform
		ivec4 bone_indicesi = ivec4(bone_indices); // cast to signed int

		ivec2 tex_ofs = ivec2(bone_indicesi.x % 256, (bone_indicesi.x / 256) * 3);
		highp mat4 m;
		m = mat4(
					texelFetch(skeleton_texture, tex_ofs, 0),
					texelFetch(skeleton_texture, tex_ofs + ivec2(0, 1), 0),
					texelFetch(skeleton_texture, tex_ofs + ivec2(0, 2), 0),
					vec4(0.0, 0.0, 0.0, 1.0)) *
			bone_weights.x;

		tex_ofs = ivec2(bone_indicesi.y % 256, (bone_indicesi.y / 256) * 3);

		m += mat4(
					 texelFetch(skeleton_texture, tex_ofs, 0),
					 texelFetch(skeleton_texture, tex_ofs + ivec2(0, 1), 0),
					 texelFetch(skeleton_texture, tex_ofs + ivec2(0, 2), 0),
					 vec4(0.0, 0.0, 0.0, 1.0)) *
			 bone_weights.y;

		tex_ofs = ivec2(bone_indicesi.z % 256, (bone_indicesi.z / 256) * 3);

		m += mat4(
					 texelFetch(skeleton_texture, tex_ofs, 0),
					 texelFetch(skeleton_texture, tex_ofs + ivec2(0, 1), 0),
					 texelFetch(skeleton_texture, tex_ofs + ivec2(0, 2), 0),
					 vec4(0.0, 0.0, 0.0, 1.0)) *
			 bone_weights.z;

		tex_ofs = ivec2(bone_indicesi.w % 256, (bone_indicesi.w / 256) * 3);

		m += mat4(
					 texelFetch(skeleton_texture, tex_ofs, 0),
					 texelFetch(skeleton_texture, tex_ofs + ivec2(0, 1), 0),
					 texelFetch(skeleton_texture, tex_ofs + ivec2(0, 2), 0),
					 vec4(0.0, 0.0, 0.0, 1.0)) *
			 bone_weights.w;

		world_matrix = world_matrix * transpose(m);
	}
#endif

	float point_size = 1.0;

	highp mat4 modelview = camera_inverse_matrix * world_matrix;
	{
		/* clang-format off */

/////////////////////////////// Source file 45/////////////////////////////
	{
		uv_interp=((uv_interp*m_uv1_scale.xy)+m_uv1_offset.xy);
	}

/////////////////////////////// Source file 46/////////////////////////////


		/* clang-format on */
	}

	gl_PointSize = point_size;

// using local coordinates (default)
#if !defined(SKIP_TRANSFORM_USED) && !defined(VERTEX_WORLD_COORDS_USED)

	vertex = modelview * vertex;

#if defined(ENSURE_CORRECT_NORMALS)
	mat3 normal_matrix = mat3(transpose(inverse(modelview)));
	normal = normal_matrix * normal;
#else
	normal = normalize((modelview * vec4(normal, 0.0)).xyz);
#endif

#if defined(ENABLE_TANGENT_INTERP) || defined(ENABLE_NORMALMAP) || defined(LIGHT_USE_ANISOTROPY)

	orthogonal = normalize((modelview * vec4(orthogonal, 0.0)).xyz);
	binormal = normalize((modelview * vec4(binormal, 0.0)).xyz);
#endif
#endif

//using world coordinates
#if !defined(SKIP_TRANSFORM_USED) && defined(VERTEX_WORLD_COORDS_USED)

	vertex = camera_inverse_matrix * vertex;
	normal = normalize((camera_inverse_matrix * vec4(normal, 0.0)).xyz);

#if defined(ENABLE_TANGENT_INTERP) || defined(ENABLE_NORMALMAP) || defined(LIGHT_USE_ANISOTROPY)

	orthogonal = normalize((camera_inverse_matrix * vec4(orthogonal, 0.0)).xyz);
	binormal = normalize((camera_inverse_matrix * vec4(binormal, 0.0)).xyz);
#endif
#endif

	vertex_interp = vertex.xyz;
	normal_interp = normal;

#if defined(ENABLE_TANGENT_INTERP) || defined(ENABLE_NORMALMAP) || defined(LIGHT_USE_ANISOTROPY)
	tangent_interp = orthogonal;
	binormal_interp = binormal;
#endif

#ifdef RENDER_DEPTH

#ifdef RENDER_DEPTH_DUAL_PARABOLOID

	vertex_interp.z *= shadow_dual_paraboloid_render_side;
	normal_interp.z *= shadow_dual_paraboloid_render_side;

	dp_clip = vertex_interp.z; //this attempts to avoid noise caused by objects sent to the other parabolloid side due to bias

	//for dual paraboloid shadow mapping, this is the fastest but least correct way, as it curves straight edges

	highp vec3 vtx = vertex_interp + normalize(vertex_interp) * z_offset;
	highp float distance = length(vtx);
	vtx = normalize(vtx);
	vtx.xy /= 1.0 - vtx.z;
	vtx.z = (distance / shadow_dual_paraboloid_render_zfar);
	vtx.z = vtx.z * 2.0 - 1.0;

	vertex_interp = vtx;

#else

	float z_ofs = z_offset;
	z_ofs += (1.0 - abs(normal_interp.z)) * z_slope_scale;
	vertex_interp.z -= z_ofs;

#endif //RENDER_DEPTH_DUAL_PARABOLOID

#endif //RENDER_DEPTH

#ifdef OVERRIDE_POSITION
	gl_Position = position;
#else
	gl_Position = projection_matrix * vec4(vertex_interp, 1.0);
#endif

	position_interp = gl_Position;

#ifdef USE_VERTEX_LIGHTING

	diffuse_light_interp = vec4(0.0);
	specular_light_interp = vec4(0.0);

#ifdef USE_FORWARD_LIGHTING

	for (int i = 0; i < omni_light_count; i++) {
		light_process_omni(omni_light_indices[i], vertex_interp, -normalize(vertex_interp), normal_interp, roughness, diffuse_light_interp.rgb, specular_light_interp.rgb);
	}

	for (int i = 0; i < spot_light_count; i++) {
		light_process_spot(spot_light_indices[i], vertex_interp, -normalize(vertex_interp), normal_interp, roughness, diffuse_light_interp.rgb, specular_light_interp.rgb);
	}
#endif

#ifdef USE_LIGHT_DIRECTIONAL

	vec3 directional_diffuse = vec3(0.0);
	vec3 directional_specular = vec3(0.0);
	light_compute(normal_interp, -light_direction_attenuation.xyz, -normalize(vertex_interp), light_color_energy.rgb, roughness, directional_diffuse, directional_specular);

	float diff_avg = dot(diffuse_light_interp.rgb, vec3(0.33333));
	float diff_dir_avg = dot(directional_diffuse, vec3(0.33333));
	if (diff_avg > 0.0) {
		diffuse_light_interp.a = diff_dir_avg / (diff_avg + diff_dir_avg);
	} else {
		diffuse_light_interp.a = 1.0;
	}

	diffuse_light_interp.rgb += directional_diffuse;

	float spec_avg = dot(specular_light_interp.rgb, vec3(0.33333));
	float spec_dir_avg = dot(directional_specular, vec3(0.33333));
	if (spec_avg > 0.0) {
		specular_light_interp.a = spec_dir_avg / (spec_avg + spec_dir_avg);
	} else {
		specular_light_interp.a = 1.0;
	}

	specular_light_interp.rgb += directional_specular;

#endif //USE_LIGHT_DIRECTIONAL

#endif // USE_VERTEX_LIGHTING
}

/* clang-format off */
"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="."]
